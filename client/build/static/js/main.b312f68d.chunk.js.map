{"version":3,"sources":["react-auth0-spa.js","components/NavBar.js","App.js","serviceWorker.js","utils/history.js","index.js","logo.svg"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","NavBar","isAuthenticated","loginWithRedirect","logout","onClick","App","loading","className","src","logo","alt","Boolean","hostname","match","createBrowserHistory","ReactDOM","render","children","onRedirectCallback","initOptions","useState","setIsAuthenticated","user","setUser","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","useEffect","a","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","console","error","Provider","value","getIdTokenClaims","getTokenSilently","getTokenWithPopup","domain","config","client_id","clientId","redirect_uri","origin","push","targetUrl","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.b312f68d.chunk.js","sourcesContent":["// src/react-auth0-spa.js\nimport React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\nwindow.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\nchildren,\nonRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n...initOptions\n}) => {\nconst [isAuthenticated, setIsAuthenticated] = useState();\nconst [user, setUser] = useState();\nconst [auth0Client, setAuth0] = useState();\nconst [loading, setLoading] = useState(true);\nconst [popupOpen, setPopupOpen] = useState(false);\n\nuseEffect(() => {\n    const initAuth0 = async () => {\n    const auth0FromHook = await createAuth0Client(initOptions);\n    setAuth0(auth0FromHook);\n\n    if (window.location.search.includes(\"code=\") &&\n        window.location.search.includes(\"state=\")) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n    }\n\n    const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n    setIsAuthenticated(isAuthenticated);\n\n    if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n    }\n\n    setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n}, []);\n\nconst loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n    await auth0Client.loginWithPopup(params);\n    } catch (error) {\n    console.error(error);\n    } finally {\n    setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n};\n\nconst handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n};\nreturn (\n    <Auth0Context.Provider\n    value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout(...p)\n    }}\n    >\n    {children}\n    </Auth0Context.Provider>\n);\n};","// src/components/NavBar.js\n\nimport React from \"react\";\nimport { useAuth0 } from \"../react-auth0-spa\";\n\nconst NavBar = () => {\nconst { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n\nreturn (\n    <div>\n    {!isAuthenticated && (\n        <button onClick={() => loginWithRedirect({})}>Log in</button>\n    )}\n\n    {isAuthenticated && <button onClick={() => logout()}>Log out</button>}\n    </div>\n);\n};\n\nexport default NavBar;","import React from 'react';\nimport NavBar from './components/NavBar';\nimport { useAuth0 } from './react-auth0-spa';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const { loading } = useAuth0();\n\n  if (loading){\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <NavBar/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Auth0Provider } from \"./react-auth0-spa\";\nimport config from \"./auth_config.json\";\nimport history from \"./utils/history\";\n\n\n//function that routes the user to the right place after login\nconst onRedirectCallback = appState => {\n    history.push(\n    appState && appState.targetUrl\n        ? appState.targetUrl\n        : window.location.pathname\n    );\n};\n\nReactDOM.render(\n    <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={window.location.origin}\n    onRedirectCallback={onRedirectCallback}\n    >\n    <App />\n    </Auth0Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}